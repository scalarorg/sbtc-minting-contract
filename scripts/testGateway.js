const { ethers } = require("hardhat");
const path = require("path");
async function main() {
  const [deployer] = await ethers.getSigners();
  console.log(
    "Deploying the contracts with the account:",
    await deployer.getAddress()
  );
  console.log("Account balance:", (await deployer.getBalance()).toString());

  // Get the AxelarGateway contract

  const axlContractName = "AxelarGateway";
  const axlContractArtifact = require(`../artifacts/contracts/axelar/${axlContractName}.sol/${axlContractName}.json`);
  const axlContractABI = axlContractArtifact.abi;
  const axlContract = new ethers.Contract(
    "0xBA3e5B0EebF14f895114EE6b0f12b6a49295515e", //TODO
    axlContractABI,
    deployer
  );
  const contractName = "AxelarAuthWeighted";
  const contractArtifact = require(`../artifacts/contracts/axelar/${contractName}.sol/${contractName}.json`);
  const contractABI = contractArtifact.abi;
  const axelarAuthWeightedContract = new ethers.Contract(
    "0x71b7B290B14D7A8EB8071e35e3457b192b4a7fB6", // TODO
    contractABI,
    deployer
  );

  const executeABI = [
    "function execute(bytes calldata input) external override",
  ];
  const executeInterface = new ethers.utils.Interface(executeABI);
  const executeObject =
    "0x09c5eabe000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000007600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000aa36a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000232e978d149e7e3c1f770da6448bb36bd857f78e44f74e5d6907ff8a03d4596cb402c668774e583d540263a3a54361bb9697713a7ff72c0efa3a493fa2eebaecc0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3f54d9b9284aec589a9983f3aac8ba894f9611c27724ae8c04e097a326dec51ddefcd370348e73c5402f30d8b785de0d5e2151a5840a5e9b0e231150e0790d25500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000010657468657265756d2d7365706f6c696100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783736384538446538636630633737343744343166373546383343393134613139433539323143663300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3eaa6d905cc65d49a1f1ad7c8e4ee962b063d47f75ebb6086a56787e300638ae827b0f70d6bd0f25f69d527469c5ee32a2dcab98b91c92e4ff9b1b195633c2759000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094178656c61726e65740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d6178656c617231756b666836783336656e747837657065773767716a766678726c756834346b32376e366b75360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000003a1f5fe00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000218f6fd2627a7526152c29992c6f240da73bba0b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005a79369000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000041a70da10e3bc8ebfa3b60de743e94ee12cddecf92ec9893979647634bd7e4baee3cd3e5616f50308ab1bafa3bf31887cac74c6e4b27cacb129ea25bd35fb6416b1b00000000000000000000000000000000000000000000000000000000000000";
  const decodedData = executeInterface.decodeFunctionData(
    "execute",
    executeObject
  );
  console.log("Decoded data:", decodedData);
  const input = decodedData.input;
  console.log("Input:", input);
  const inputDecoded = ethers.utils.defaultAbiCoder.decode(
    ["bytes", "bytes"],
    input
  );
  const [data, proof] = inputDecoded;
  console.log("==================================================");
  console.log("Data:", data);
  const dataDecoded = ethers.utils.defaultAbiCoder.decode(
    ["uint256", "bytes32[]", "string[]", "bytes[]"],
    data
  );
  const [chainId, commandIds, commands, params] = dataDecoded;
  console.log("Chain ID:", chainId);
  console.log("Command IDs:", commandIds);
  console.log("Commands:", commands);
  console.log("Params:", params);
  console.log("==================================================");
  console.log("Proof:", proof);
  const proofDecoded = ethers.utils.defaultAbiCoder.decode(
    ["address[]", "uint256[]", "uint256", "bytes[]"],
    proof
  );
  const [operators, weights, threshold, signatures] = proofDecoded;
  console.log("Operators:", operators);
  console.log("Weights:", weights);
  console.log("Threshold:", threshold);
  console.log("Signatures:", signatures);
  const operatorsHash = ethers.utils.keccak256(
    ethers.utils.defaultAbiCoder.encode(
      ["address[]", "uint256[]", "uint256"],
      [operators, weights, threshold]
    )
  );
  console.log("Operators hash:", operatorsHash);
  const epochForHash = await axelarAuthWeightedContract.epochForHash(
    operatorsHash
  );
  console.log("Epoch for hash:", epochForHash.toString());
  const currentEpoch = await axelarAuthWeightedContract.currentEpoch();
  console.log("Current Epoch:", currentEpoch.toString());
  console.log(
    "Current Hash:",
    await axelarAuthWeightedContract.hashForEpoch(currentEpoch)
  );
  // const testBytes =
  //   "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000aa36a7000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000232e978d149e7e3c1f770da6448bb36bd857f78e44f74e5d6907ff8a03d4596cb402c668774e583d540263a3a54361bb9697713a7ff72c0efa3a493fa2eebaecc0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3f54d9b9284aec589a9983f3aac8ba894f9611c27724ae8c04e097a326dec51ddefcd370348e73c5402f30d8b785de0d5e2151a5840a5e9b0e231150e0790d25500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000010657468657265756d2d7365706f6c696100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783736384538446538636630633737343744343166373546383343393134613139433539323143663300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3eaa6d905cc65d49a1f1ad7c8e4ee962b063d47f75ebb6086a56787e300638ae827b0f70d6bd0f25f69d527469c5ee32a2dcab98b91c92e4ff9b1b195633c2759000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094178656c61726e65740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d6178656c617231756b666836783336656e747837657065773767716a766678726c756834346b32376e366b75360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000003a1f5fe00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000218f6fd2627a7526152c29992c6f240da73bba0b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005a79369000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000041a70da10e3bc8ebfa3b60de743e94ee12cddecf92ec9893979647634bd7e4baee3cd3e5616f50308ab1bafa3bf31887cac74c6e4b27cacb129ea25bd35fb6416b1b00000000000000000000000000000000000000000000000000000000000000";
  // const txExecute = await axlContract.execute3(testBytes, {
  //   gasLimit: 1000000,
  // });
  // await txExecute.wait();
  // console.log("Transaction hash:", txExecute.hash);

  //   saveABI([
  //     {
  //       name: "AxelarGateway",
  //       address: axelarGateway.address,
  //     },
  //   ]);
}
function saveABI(contracts) {
  const fs = require("fs");
  const contractsDir = path.join(__dirname, "..", "abis", "gateway");

  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir);
  }

  let contractAddresses = {};

  contracts.forEach((contract) => {
    // Save each contract's address
    contractAddresses[contract.name] = contract.address;

    // Save each contract's artifact
    const ContractArtifact = artifacts.readArtifactSync(contract.name);
    fs.writeFileSync(
      path.join(contractsDir, `${contract.name}.json`),
      JSON.stringify(ContractArtifact, null, 2)
    );
  });

  // Save all contract addresses in a single file
  fs.writeFileSync(
    path.join(contractsDir, "contract-addresses.json"),
    JSON.stringify(contractAddresses, undefined, 2)
  );
}

main()
  .then(() => {
    // Prevent the script from exiting
    process.stdin.resume();
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
