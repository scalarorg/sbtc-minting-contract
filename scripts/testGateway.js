const { ethers } = require("hardhat");
const path = require("path");
async function main() {
  const [deployer] = await ethers.getSigners();
  console.log(
    "Deploying the contracts with the account:",
    await deployer.getAddress()
  );
  console.log("Account balance:", (await deployer.getBalance()).toString());

  // Get the AxelarGateway contract

  const axlContractName = "AxelarGateway";
  const axlContractArtifact = require(`../artifacts/contracts/axelar/${axlContractName}.sol/${axlContractName}.json`);
  const axlContractABI = axlContractArtifact.abi;
  const axlContract = new ethers.Contract(
    "0xBC9ee019Ccac5677f60d4e3c0F7c774e9cD6932B", //TODO
    axlContractABI,
    deployer
  );
  const contractName = "AxelarAuthWeighted";
  const contractArtifact = require(`../artifacts/contracts/axelar/${contractName}.sol/${contractName}.json`);
  const contractABI = contractArtifact.abi;
  const axelarAuthWeightedContract = new ethers.Contract(
    "0x71b7B290B14D7A8EB8071e35e3457b192b4a7fB6", // TODO
    contractABI,
    deployer
  );

  const executeABI = [
    "function execute(bytes calldata input) external override",
  ];
  const executeInterface = new ethers.utils.Interface(executeABI);
  const executeObject =
    "0x09c5eabe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000ae0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000007400000000000000000000000000000000000000000000000000000000000aa36a70000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000003c53c0fc5c98adf994c0d66785d0c8ea50e6b4666718e9d36ee7359588915d0fdcf8de00910242caff448d6aeb3a5429cfe7183069e675827d4148835b5d17362eda273985aacb9b027dc363be68d10258ace43ce19fd555131b9e4d9882cf0d20000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013617070726f7665436f6e747261637443616c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3697d52f010038ab37352d5109e7d1120fc7b7fcf7ccba5d29d2c8122b5c258d813e6f5cb0e8461c615c2bdb0d69a6facbf354ae1013a08191cf09bdc558228f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000857626974636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783133304334383130443537313430653145363239363763424637343243614561453931623665634500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3697d52f010038ab37352d5109e7d1120fc7b7fcf7ccba5d29d2c8122b5c258d8dcb7d1c133440674b6b80ff296f987b761cf0b86f4824481a5f36332b7c73da00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000857626974636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783133304334383130443537313430653145363239363763424637343243614561453931623665634500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000768e8de8cf0c7747d41f75f83c914a19c5921cf3697d52f010038ab37352d5109e7d1120fc7b7fcf7ccba5d29d2c8122b5c258d816162835d26f148352793e53f9155069830ee8521be7251b385783624d12e8760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000857626974636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783133304334383130443537313430653145363239363763424637343243614561453931623665634500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000ea6000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000450ef898237296feb7a1f19ab41d4228fa55b8fd000000000000000000000000583990aca884d8f20d1d252e3027a2b03344e195000000000000000000000000b002f8b7bc79e08e05fd0eb2a6449f3b4da3e44b000000000000000000000000d905fdcb01e0bb98411933425498a6afb416d3f5000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041c6f542d324c862704be28a178d0237d1de2da92cbd534c9d06ab4dbf4716c4bf7b5f023dd97a2a1f9d9a1c197adede0284be243855c83a900b788b996e4d9ada1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004169ed11545c984231dcfea70fd611b14d96acf7f8602d8cb3e271386b7d16cbab59d9e264dda46fdd62c06f7a3585e528965598ff70f8fc68caebecb80c2496b71c00000000000000000000000000000000000000000000000000000000000000";
  const decodedData = executeInterface.decodeFunctionData(
    "execute",
    executeObject
  );
  const input = decodedData.input;
  const inputDecoded = ethers.utils.defaultAbiCoder.decode(
    ["bytes", "bytes"],
    input
  );
  const [data, proof] = inputDecoded;
  console.log("==================================================");
  console.log("Data part:");
  const dataDecoded = ethers.utils.defaultAbiCoder.decode(
    ["uint256", "bytes32[]", "string[]", "bytes[]"],
    data
  );
  const [chainId, commandIds, commands, params] = dataDecoded;
  console.log("Chain ID:", chainId);
  console.log("Command IDs:", commandIds);
  console.log("Commands:", commands);
  console.log("Params:", params);
  console.log("==================================================");
  console.log("Proof part:");
  const proofDecoded = ethers.utils.defaultAbiCoder.decode(
    ["address[]", "uint256[]", "uint256", "bytes[]"],
    proof
  );
  const [operators, weights, threshold, signatures] = proofDecoded;
  console.log("Operators:", operators);
  console.log("Weights:", weights);
  console.log("Threshold:", threshold);
  console.log("Signatures:", signatures);

  console.log("==================================================");
  console.log("Compare data:");
  const operatorsHash = ethers.utils.keccak256(
    ethers.utils.defaultAbiCoder.encode(
      ["address[]", "uint256[]", "uint256"],
      [operators, weights, threshold]
    )
  );
  console.log("Operators hash:", operatorsHash);
  const epochForHash = await axelarAuthWeightedContract.epochForHash(
    operatorsHash
  );
  console.log("Epoch for this hash:", epochForHash.toString());
  const currentEpoch = await axelarAuthWeightedContract.currentEpoch();
  console.log(
    "Current Hash:",
    await axelarAuthWeightedContract.hashForEpoch(currentEpoch)
  );
  console.log("Current Epoch:", currentEpoch.toString());
  console.log("==================================================");
  console.log("Verify Signature:");
  const dataHash = ethers.utils.keccak256(data);

  // Convert the hashed data to an Ethereum signed message hash
  const ethSignedMessageHash = ethers.utils.hashMessage(
    ethers.utils.arrayify(dataHash)
  );
  signatures.map((signature, index) => {
    const signerAddress = ethers.utils.recoverAddress(
      ethSignedMessageHash,
      signature
    );
    console.log("Signer Address", index, ":", signerAddress);
  });
  console.log("==================================================");
  console.log("Check approve:");
  const paramsDecoded = ethers.utils.defaultAbiCoder.decode(
    ["string", "string", "address", "bytes32", "bytes32", "uint256"],
    params[0]
  );
  const [
    sourceChain,
    sourceAddress,
    contractAddress,
    payloadHash,
    sourceTxHash,
    sourceEventIndex,
  ] = paramsDecoded;
  console.log("Source Chain:", sourceChain);
  console.log("Source Address:", sourceAddress);
  console.log("Contract Address:", contractAddress);
  console.log("Payload Hash:", payloadHash);
  console.log("Source Tx Hash:", sourceTxHash);
  console.log("Source Event Index:", sourceEventIndex.toString());
  // console.log(
  //   await axlContract.isCommandExecuted(
  //     "0x54c016d0256792525b6bfddecc27ff98fe86a9e762ed66a1f42f05778c4bfefe"
  //   )
  // );
  console.log("Execute:");
  const txExecute = await axlContract.execute(input);
  await txExecute.wait();
  console.log("Tx Hash:", txExecute.hash);
  // const txCheckExecuted = await axlContract.isCommandExecuted(
  //   "0x54c016d0256792525b6bfddecc27ff98fe86a9e762ed66a1f42f05778c4bfefe"
  // );
  // console.log("Check Executed:", txCheckExecuted);
  const checkHash = ethers.utils.keccak256("0x000000007B7D");
  console.log("Check Hash:", checkHash);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
